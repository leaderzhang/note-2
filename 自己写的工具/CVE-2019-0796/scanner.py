'''
#############################################################################
#修改于https://raw.githubusercontent.com/ollypwn/SMBGhost/master/scanner.py#
#author:九世                                                               #
#time:2020/3/13                                                            #
#filename:scanner.py                                                       #
############################################################################

'''
from gevent import monkey;monkey.patch_all()
from multiprocessing import Process
import gevent
import socket
import asyncio
import struct
import sys
import os
from netaddr import IPNetwork
from IPy import IP

class Scanner(object):
    def __init__(self):
        banner =r'''  ___  _  _  ____     ___   ___  ___   ___         ___  ___  ___   _  
 / __)( \/ )( ___)___(__ \ / _ \(__ \ / _ \  ___  / _ \(__ )/ _ \ / ) 
( (__  \  /  )__)(___)/ _/( (_) )/ _/( (_) )(___)( (_) )/ / \_  // _ \
 \___)  \/  (____)   (____)\___/(____)\___/       \___/(_/   (_/ \___/'''
        self.djcs = []
        self.xcs = []
        self.ybs = []
        self.calc = 0
        self.calc2 = 0
        self.calc3 = 0
        self.thread=100 #满指定数量执行并发任务
        print(banner)
        print(75*'=')
        if len(sys.argv)==3:
            self.type=sys.argv[1]
            self.ip=sys.argv[2]
            if self.type=='1':
                self.scanners(self.ip)
            elif self.type=='2':
                if os.path.exists(self.ip):
                    print('[+] Found File:{}'.format(self.ip))
                    loop = asyncio.get_event_loop()
                    tk = loop.create_task(self.yb(self.ip))
                    loop.run_until_complete(tk)
                else:
                    print('[-] Not Found File:{}'.format(self.ip))
            elif self.type=='3':
                print('[+] IP/Subnet:{}'.format(self.ip))
                loop = asyncio.get_event_loop()
                tk = loop.create_task(self.jc(self.ip))
                loop.run_until_complete(tk)
        else:
            help='''python scanner.py 1 <RHOST>\npython scanner.py 2 <file>\npython scanner.py 3 <IP/Subnet>
            '''
            print(help)

    def sca(self,ip):
        dt = 'Testing:{}'.format(ip)
        print('{}{}'.format(len(dt) * '\r', dt), end='')
        pkt = b'\x00\x00\x00\xc0\xfeSMB@\x00\x00\x00\x00\x00\x00\x00\x00\x00\x1f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00$\x00\x08\x00\x01\x00\x00\x00\x7f\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00x\x00\x00\x00\x02\x00\x00\x00\x02\x02\x10\x02"\x02$\x02\x00\x03\x02\x03\x10\x03\x11\x03\x00\x00\x00\x00\x01\x00&\x00\x00\x00\x00\x00\x01\x00 \x00\x01\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x03\x00\n\x00\x00\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x01\x00\x00\x00\x00\x00\x00\x00'
        subnet = ip
        for ip in IPNetwork(subnet):
            sock = socket.socket(socket.AF_INET)
            sock.settimeout(3)
            try:
                sock.connect((str(ip), 445))
            except:
                sock.close()
                continue

            sock.send(pkt)
            nb, = struct.unpack(">I", sock.recv(4))
            res = sock.recv(nb)
            if res[68:70] != b"\x11\x03" or res[70:72] != b"\x02\x00":
                print(f"\r{ip} Not vulnerable.")
            else:
                print(f"\r{ip} Vulnerable")
                print(f"\r{ip} Vulnerable",file=open('save.txt','a',encoding='utf-8'))

    def xc(self,rw):
        for r in rw:
            self.xcs.append(gevent.spawn(self.sca,r))
        gevent.joinall(self.xcs)
        self.xcs.clear()

    def djc(self):
        for r in self.ybs:
            if self.calc2==self.thread:
                p=Process(target=self.xc,args=(self.djcs,))
                p.start()
                self.djcs.clear()
                self.calc2=0
            self.djcs.append(r)
            self.calc2+=1

        if len(self.djcs)>0:
            p = Process(target=self.xc, args=(self.djcs,))
            p.start()
            self.djcs.clear()
            self.calc2 = 0

    async def yb(self,file):
        dk=open(file,'r',encoding='utf-8')
        for d in dk.readlines():
            if self.calc==self.thread:
                self.djc()
                self.calc=0
                self.ybs.clear()
            data="".join(d.split('\n'))
            self.ybs.append(data)
            self.calc+=1

        if len(self.ybs)>0:
            self.djc()
            self.calc = 0
            self.ybs.clear()

    async def jc(self,sork):
        for data in IP(sork):
            if self.calc == self.thread:
                self.djc()
                self.calc = 0
                self.ybs.clear()
            self.ybs.append(str(data).rstrip().lstrip().replace(' ',''))
            self.calc += 1

        if len(self.ybs) > 0:
            self.djc()
            self.calc = 0
            self.ybs.clear()

if __name__ == '__main__':
    obj=Scanner()