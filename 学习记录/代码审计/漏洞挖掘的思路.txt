漏洞形成的条件：
1.可控制的变量（一切输入都是有害的）
2.变量达到有利用价值的函数

漏洞造成的效果：
漏洞的利用效果取决于最终函数的功能
变量进入睡眠样的函数就导致什么样的效果

代码审计的本质：
找漏洞--找对应变量与函数

变量跟踪的过程：
通过变量找函数【正向跟踪】
通过喊找变量【逆向跟踪】（查找危险函数，例如：eval）

找到变量所在的函数，然后跟踪变量怎么处理。然后在看所在的函数被谁调用了