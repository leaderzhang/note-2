C# 事件（Event）
事件（Event） 基本上说是一个用户操作，如按键、点击、鼠标移动等等，或者是一些提示信息，如系统生成的通知。应用程序需要在事件发生时响应事件。例如，中断。

C# 中使用事件机制实现线程间的通信。

通过事件使用委托
事件在类中声明且生成，且通过使用同一个类或其他类中的委托与事件处理程序关联。包含事件的类用于发布事件。这被称为 发布器（publisher） 类。其他接受该事件的类被称为 订阅器（subscriber） 类。事件使用 发布-订阅（publisher-subscriber） 模型。
发布器（publisher） 是一个包含事件和委托定义的对象。事件和委托之间的联系也定义在这个对象中。发布器（publisher）类的对象调用这个事件，并通知其他的对象。
订阅器（subscriber） 是一个接受事件并提供事件处理程序的对象。在发布器（publisher）类中的委托调用订阅器（subscriber）类中的方法（事件处理程序）。

声明事件（Event）
在类的内部声明事件，首先必须声明该事件的委托类型。例如：

public delegate void BoilerLogHandler(string status);
然后，声明事件本身，使用 event 关键字：

// 基于上面的委托定义事件
public event BoilerLogHandler BoilerEventLog;
上面的代码定义了一个名为 BoilerLogHandler 的委托和一个名为 BoilerEventLog 的事件，该事件在生成的时候会调用委托。

例子：
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    public class logos { //事件发布器
        public delegate void Boiler(); //定义委托函数
        public event Boiler Meteruis;  //使用委托定义一个变量
        public void Logs(int temp,string value) {
            Console.WriteLine("id:{0} Name:{1}",temp,value);
            Meteruis(); //此时Meteruis()等于Gvs.echo()函数
        }
    }

    class Gvs {
        public void echo() {
            Console.WriteLine("事件触发之后的处理函数？");
        }
    }

    class Chen { //事件订阅器
        static void Main(string[] args) {
            logos n = new logos(); //实例化定义事件的类
            Gvs y = new Gvs(); //定义被当做事件处理的函数
            n.Meteruis += new logos.Boiler(y.echo); //使用委托定义的变量调用委托来执行处理函数
            n.Logs(1, "What"); //调用logs函数触发事件
            Console.WriteLine("80*80={0}", 80 * 80);
            Console.ReadKey();
        }
    }
}

【图1】

带有函数的事件器
using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ConsoleApplication1
{
    public class logos {
        public delegate void Boiler(string value);
        public event Boiler Meteruis;
        public void Logs(int temp,string value) {
            Console.WriteLine("id:{0} Name:{1}",temp,value);
            Meteruis(value);
        }
    }

    class Gvs {
        public void echo(string jg) {
            Console.WriteLine(jg);
        }

        public void gtv(string name) {
            Console.WriteLine(name);
        }
    }

    class Chen {
        static void Main(string[] args) {
            logos n = new logos();
            Gvs y = new Gvs();
            n.Meteruis += new logos.Boiler(y.echo);
            n.Logs(1, "What");
            Console.WriteLine("80*80={0}", 80 * 80);

            logos c = new logos(); //重新定义一个事件class，否则执行Meteruis的时候两个Gvs的函数都会被触发，虽然可以写个判断
            c.Meteruis += new logos.Boiler(y.gtv); 
            c.Logs(1, "我屌你吗"); //除非事件
            Console.ReadKey();
        }
    }
}

注意事项：
* 传入的函数必须与定义的委托函数类型一致
* 通过委托函数调用其他class的函数时，记得执行定义事件器里的函数